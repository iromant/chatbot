package personalBanker.dialog.states;

import personalBanker.dialog.model.DialogContext;
import personalBanker.messageprovider.CategoriesMessage;
import personalBanker.messageprovider.MessageProvider;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

public abstract class FinanceState implements DialogState {
    protected final MessageProvider messageProvider;
    protected final Map<String, Double> categories;
    protected String currentOperation; // "add", "remove", –∏–ª–∏ null
    protected String selectedCategory;

    public FinanceState() {
        this.messageProvider = new CategoriesMessage();
        this.categories = new HashMap<>();
        this.currentOperation = null;
        this.selectedCategory = null;
        initializeCategories();
    }

    protected abstract void initializeCategories();
    protected abstract String getMenuMessageKey();
    protected abstract String getTypeName();

    @Override
    public String onEnter() {
        resetOperation();
        return buildMainMenu();
    }

    @Override
    public String userRequest(DialogContext context) {
        String input = context.getUserInput().toLowerCase().trim();

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É–º–º—É
        if (selectedCategory != null && currentOperation != null) {
            return processAmount(input);
        }

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (currentOperation != null) {
            return processCategorySelection(input);
        }

        // –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π
        return processOperationMenu(input, context);
    }

    @Override
    public DialogState goNextState(DialogContext context) {
        return context.hasNextState() ? context.getNextState() : this;
    }

    private String buildMainMenu() {
        return messageProvider.getMessage(getMenuMessageKey());
    }

    private String processOperationMenu(String input, DialogContext context) {
        switch (input) {
            case "1":
            case "–¥–æ–±–∞–≤–∏—Ç—å":
                currentOperation = "add";
                return showCategorySelection();
            case "2":
            case "—É–¥–∞–ª–∏—Ç—å":
                currentOperation = "remove";
                return showCategorySelection();
            case "3":
            case "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            case "–ø—Ä–æ—Å–º–æ—Ç—Ä":
                return showStatistics();
            case "4":
            case "–Ω–∞–∑–∞–¥":
                context.setNextState(new MainState());
                return "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...";
            default:
                return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n" + buildMainMenu();
        }
    }

    private String showCategorySelection() {
        StringBuilder sb = new StringBuilder();
        String operationName = "add".equals(currentOperation) ? "–¥–æ—Ö–æ–¥" : "—Ä–∞—Å—Ö–æ–¥";
        sb.append("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è ").append(operationName).append(":\n\n");

        List<String> categoryList = new ArrayList<>(categories.keySet());
        for (int i = 0; i < categoryList.size(); i++) {
            String category = categoryList.get(i);
            double amount = categories.getOrDefault(category, 0.0);
            sb.append(i + 1).append(". ").append(category);
            sb.append(" (").append(amount).append(" —Ä—É–±.)\n");
        }

        sb.append("\n").append(categoryList.size() + 1).append(". –û—Ç–º–µ–Ω–∞");
        sb.append("\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:");
        return sb.toString();
    }

    private String processCategorySelection(String input) {
        try {
            int choice = Integer.parseInt(input);
            List<String> categoryList = new ArrayList<>(categories.keySet());

            if (choice == categoryList.size() + 1) {
                resetOperation();
                return "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n" + buildMainMenu();
            }

            if (choice >= 1 && choice <= categoryList.size()) {
                selectedCategory = categoryList.get(choice - 1);
                String operationName = "add".equals(currentOperation) ? "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è" : "—É–¥–∞–ª–µ–Ω–∏—è";
                return "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è " + operationName + " –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é \"" + selectedCategory + "\":";
            } else {
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:\n\n" + showCategorySelection();
            }
        } catch (NumberFormatException e) {
            return "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:\n\n" + showCategorySelection();
        }
    }

    private String processAmount(String input) {
        try {
            double amount = Double.parseDouble(input);
            if (amount <= 0) {
                return "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:";
            }

            return executeFinancialOperation(amount);

        } catch (NumberFormatException e) {
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:";
        }
    }

    private String executeFinancialOperation(double amount) {
        String result;

        if ("add".equals(currentOperation)) {
            result = addSum(selectedCategory, amount);
        } else {
            result = removeSum(selectedCategory, amount);
        }

        resetOperation();
        return result + "\n\n" + buildMainMenu();
    }

    private String showStatistics() {
        if (categories.isEmpty() || getTotalAmount() == 0) {
            return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞\n\n" + buildMainMenu();
        }

        StringBuilder sb = new StringBuilder();
        sb.append("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ").append(getTypeName()).append(":\n\n");

        double total = 0;
        for (Map.Entry<String, Double> entry : categories.entrySet()) {
            if (entry.getValue() > 0) {
                sb.append("‚Ä¢ ").append(entry.getKey()).append(": ").append(entry.getValue()).append(" —Ä—É–±.\n");
                total += entry.getValue();
            }
        }

        sb.append("\nüíé –ò—Ç–æ–≥–æ: ").append(total).append(" —Ä—É–±.\n\n");
        sb.append(buildMainMenu());
        return sb.toString();
    }

    private void resetOperation() {
        currentOperation = null;
        selectedCategory = null;
    }

    // –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏
    public String addSum(String category, double sum) {
        double current = categories.getOrDefault(category, 0.0);
        categories.put(category, current + sum);
        return "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ " + sum + " —Ä—É–±. –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é \"" + category + "\"";
    }

    public String removeSum(String category, double sum) {
        double current = categories.getOrDefault(category, 0.0);
        if (sum > current) {
            return "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–æ—Å—Ç—É–ø–Ω–æ: " + current + " —Ä—É–±.";
        }
        categories.put(category, current - sum);
        return "‚úÖ –£–¥–∞–ª–µ–Ω–æ " + sum + " —Ä—É–±. –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"" + category + "\"";
    }

    private double getTotalAmount() {
        return categories.values().stream().mapToDouble(Double::doubleValue).sum();
    }
}